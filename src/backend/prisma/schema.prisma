generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Playlist {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  createdAt    DateTime       @default(now())
  PlaylistSong PlaylistSong[]
  Vote         Vote[]
}

model Song {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  album        String         @db.VarChar(100)
  artist       String         @db.VarChar(100)
  thumbnail    String         @db.VarChar(150)
  createdAt    DateTime       @default(now())
  PlaylistSong PlaylistSong[]
  Vote         Vote[]
  @@unique([name, artist])
}

model User {
  id           Int            @id @default(autoincrement())
  login        String         @unique @db.VarChar(30)
  password     String         @db.VarChar(70)
  mail         String         @unique
  name         String?
  createdAt    DateTime       @default(now())
  PlaylistSong PlaylistSong[]
  Vote         Vote[]
  isAdmin      Boolean        @default(false)
}

model PlaylistSong {
  playlist    Playlist @relation(fields: [playlistId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  playlistId  Int
  song        Song     @relation(fields: [songId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  songId      Int
  votesNb        Int?
  submitter   User?     @relation(fields: [submitterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  submitterId Int?
  createdAt    DateTime       @default(now())

  @@id([playlistId, songId])
}

model Vote {
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId     Int
  // playlist Playlist @relation(fields: [playlistId], references: [id])
  playlist   Playlist @relation(fields: [playlistId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  playlistId Int
  song       Song     @relation(fields: [songId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  songId     Int
  voteDate  DateTime? @default(now())

  @@id([songId, playlistId, userId])
}
